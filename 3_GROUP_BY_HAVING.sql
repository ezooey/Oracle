/*
5 : SELECT 컬럼명 AS 별칭, 계산식, 함수식
1 : FROM 참조할 테이블명
2 : WHERE 컬럼명|함수식 비교연산자 비교값
3 : GROUP BY 그룹으로 묶을 컬럼명
4 : HAVING 그룹함수식 비교연산자 비교값
6 : ORDER BY 컬럼명|별칭|컬럼순번 정렬방식 [NULLS FIRST|LAST]
꼭 이 순서로 들어가야 함
*/

-- GROUP BY
SELECT DEPT_CODE, SUM(SALARY)
FROM EMPLOYEE;
-- ERROR : 단일 그룹의 그룹 함수가 아닙니다 (행의 개수 불일치)

SELECT DEPT_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY DEPT_CODE;
-- DEPT_CODE로 그룹화

SELECT SUM(SALARY)
FROM EMPLOYEE
GROUP BY DEPT_CODE;

-- EMPLOYEE 테이블에서 부서 코드별 그룹을 지정하여 부서코드, 그룹별 급여 합계, 그룹별 급여 평균(정수처리), 인원수 조회
-- 부서코드 순으로 정렬
SELECT DEPT_CODE, SUM(SALARY), FLOOR(AVG(SALARY)), COUNT(*) 인원수 -- COUNT(DEPT_CODE)하면 결과값 달라짐 주의
FROM EMPLOYEE
GROUP BY DEPT_CODE
ORDER BY DEPT_CODE;

-- EMPLOYEE 테이블에서 부서코드와 보너스 받는 사원 수 조회하고 부서코드 순으로 정렬
SELECT DEPT_CODE, COUNT(BONUS)
FROM EMPLOYEE
GROUP BY DEPT_CODE
ORDER BY DEPT_CODE;

-- EMPLOYEE 테이블에서 직급코드, 보너스를 받는 사원의 수를 조회하여 직급코드 순으로 오름차순 정렬
SELECT JOB_CODE, COUNT(BONUS)
FROM EMPLOYEE
WHERE BONUS IS NOT NULL
GROUP BY JOB_CODE
ORDER BY JOB_CODE;

-- EMPLOYEE 테이블에서 성별과 성별에 따른 급여 평균(정수처리), 급여 합계, 인원수 조회하고 인원수로 내림차순 정렬
SELECT DECODE(SUBSTR(EMP_NO, 8, 1), 1, '남', '여') 성별,
       FLOOR(AVG(SALARY)) "급여 평균" , SUM(SALARY) "급여 합계", COUNT(*) 인원수
FROM EMPLOYEE
-- GROUP BY DECODE(SUBSTR(EMP_NO, 8, 1), 1, '남', '여') -- 둘 다 결과는 같음
GROUP BY SUBSTR(EMP_NO, 8, 1)
ORDER BY COUNT(*) DESC;  -- COUNT(*) 대신 인원수 별칭으로도 가능

-- EMPLOYEE 테이블에서 부서 코드 별로 같은 직급인 사원의 급여 합계 조회
SELECT DEPT_CODE, JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY DEPT_CODE, JOB_CODE;   -- 여러개의 컬럼으로 묶기도 가능


-- HAVING
-- 부서 코드와 급여 300만 이상인 직원의 그룹별 평균 급여 조회(WHERE절 필요)
SELECT DEPT_CODE, AVG(SALARY)
FROM EMPLOYEE
WHERE SALARY >= 3000000
GROUP BY DEPT_CODE;

-- 부서 코드와 급여 평균 300만 이상인 그룹 조회(HAVING 필요)
SELECT DEPT_CODE, AVG(SALARY)
FROM EMPLOYEE
GROUP BY DEPT_CODE
HAVING AVG(SALARY) >= 3000000;

-- 부서 별 그룹의 급여 합계 중 9백만을 초과하는 부서 코드와 급여 합계
SELECT DEPT_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY DEPT_CODE
HAVING SUM(SALARY) > 9000000;

-- 집계함수 ROLLUP과 CUBE
-- 그룹 별로 산출한 결과 값을 집계하는 함수
SELECT JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY ROLLUP(JOB_CODE)       -- 롤업 추가로 한 단이 맨 아래에 추가됨
ORDER BY JOB_CODE;

SELECT JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY CUBE(JOB_CODE)         -- 여기까진 결과는 같음
ORDER BY JOB_CODE;

-- ROLLUP : 그룹 별로 중간 집계처리를 하는 함수
-- 인자로 전달 받은 그룹 중에서 가장 먼저 지정된 그룹으로 집계
SELECT DEPT_CODE, JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY ROLLUP(DEPT_CODE, JOB_CODE)
ORDER BY DEPT_CODE;

-- CUBE : 그룹 별로 중간 집계처리를 하는 함수
-- 인자로 전달 받은 모든 그룹에 대한 집계 진행
SELECT DEPT_CODE, JOB_CODE, SUM(SALARY)
FROM EMPLOYEE
GROUP BY CUBE(DEPT_CODE, JOB_CODE)
ORDER BY DEPT_CODE;

-- 집합연산자
-- UNION : 합집함 (=OR)
-- INTERSECT : 교집합 (=AND)
-- UNION ALL : 합집합 + 교집합 (OR + AND)
-- MINUS : 차집합

-- UNION
-- 사번이 200번인 사원과 201번인 사원 조회
SELECT EMP_ID, EMP_NAME
FROM EMPLOYEE
WHERE EMP_ID = 200;
SELECT EMP_ID, EMP_NAME
FROM EMPLOYEE
WHERE EMP_ID = 201;

SELECT EMP_ID, EMP_NAME
FROM EMPLOYEE
WHERE EMP_ID = 200 OR EMP_ID = 201;

SELECT EMP_ID, EMP_NAME
FROM EMPLOYEE
WHERE EMP_ID = 200
UNION
SELECT EMP_ID, EMP_NAME
FROM EMPLOYEE
WHERE EMP_ID = 201;

-- DEPT_CODE가 D5이거나 급여가 300만원을 초과하는 직원의 사번, 이름, 부서코드, 급여 조회
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5' OR SALARY > 3000000;

SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5'
UNION
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY > 3000000;
-- 12명의 결과

-- INTERSECT
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5'
INTERSECT
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY > 3000000;
-- 심봉선 대북혼

SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5' AND SALARY > 3000000;

-- UNION ALL (결과 중복해서 나옴)
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5'
UNION ALL
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY > 3000000;
-- 위의 12명과 중복되는 심봉선 대북혼 한 번 더 해서 14명의 결과가 나온다

-- MINUS
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE DEPT_CODE = 'D5'
MINUS
SELECT EMP_ID, EMP_NAME, DEPT_CODE, SALARY
FROM EMPLOYEE
WHERE SALARY > 3000000;
-- D5이면서 300만원 이하인 월급인 사람들(4명)

-- GROUPING SETS
SELECT DEPT_CODE, JOB_CODE, MANAGER_ID, FLOOR(AVG(SALARY))
FROM EMPLOYEE
GROUP BY GROUPING SETS((DEPT_CODE, JOB_CODE, MANAGER_ID),
                        (DEPT_CODE, MANAGER_ID),
                        (JOB_CODE, MANAGER_ID));\
-- 처음엔 50개라고 나오지만 스크롤 내려보면 53개라고 나옴

SELECT DEPT_CODE, JOB_CODE, MANAGER_ID, FLOOR(AVG(SALARY))
FROM EMPLOYEE
GROUP BY DEPT_CODE, JOB_CODE, MANAGER_ID; --19

SELECT DEPT_CODE, MANAGER_ID, FLOOR(AVG(SALARY))
FROM EMPLOYEE
GROUP BY DEPT_CODE, MANAGER_ID; --15

SELECT JOB_CODE, MANAGER_ID, FLOOR(AVG(SALARY))
FROM EMPLOYEE
GROUP BY JOB_CODE, MANAGER_ID; --19
-- 이 세 개를 다 합한 것이 위의 GROUPING SETS